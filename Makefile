# SPDX-License-Identifier: GPL-2.0-only
# Standalone Makefile for schedscore (uses pkg-config libbpf and system bpftool)

# ---- Optional configuration file (generated by ./configure)
-include config.mk

# ---- Compilers/flags
CLANG        ?= clang
CC           ?= cc
PKG_CONFIG   ?= pkg-config
CFLAGS       ?= -O2 -g -Wall -Wextra
CPPFLAGS     ?=
LDFLAGS      ?=
LDLIBS       ?=

# ---- Resolve libbpf via pkg-config (unless provided via config.mk)
LIBBPF_CFLAGS ?= $(shell $(PKG_CONFIG) --cflags libbpf 2>/dev/null)
LIBBPF_LIBS   ?= $(shell $(PKG_CONFIG) --libs   libbpf 2>/dev/null)
CPPFLAGS      += $(LIBBPF_CFLAGS)
LDLIBS        += $(LIBBPF_LIBS)

# ---- Resolve bpftool from PATH (or config.mk)
BPFTOOL_BIN   ?= $(shell command -v bpftool 2>/dev/null)

# ---- Our sources/outputs
USERBIN      := schedscore
USEROBJ      := schedscore.o

BPF_C        := schedscore.bpf.c
BPF_O        := schedscore.bpf.o
BPF_SKEL_H   := schedscore.skel.h
VMLINUX_H    := vmlinux.h

# Default target
all: deps $(USERBIN)

# ---- Dependency checks (no in-tree builds). Fail early with clear messages.
deps:
	@if [ -z "$(LIBBPF_LIBS)" ]; then \
		echo "ERROR: libbpf not found via pkg-config. Install libbpf-dev or run ./configure."; \
		exit 1; \
	fi
	@if [ -z "$(BPFTOOL_BIN)" ]; then \
		echo "ERROR: bpftool not found in PATH. Install bpftool or run ./configure to set BPFTOOL."; \
		exit 1; \
	fi

# ---- Generate vmlinux.h from running kernel's BTF (once)
$(VMLINUX_H): | deps
	@if [ ! -r /sys/kernel/btf/vmlinux ]; then \
		echo "ERROR: /sys/kernel/btf/vmlinux not found (enable CONFIG_DEBUG_INFO_BTF)"; \
		exit 1; \
	fi
	$(BPFTOOL_BIN) btf dump file /sys/kernel/btf/vmlinux format c > $@

# ---- Build BPF object and skeleton
$(BPF_O): $(BPF_C) $(VMLINUX_H)
	$(CLANG) -O2 -g -target bpf $(CPPFLAGS) -c $< -o $@

$(BPF_SKEL_H): $(BPF_O) | deps
	$(BPFTOOL_BIN) gen skeleton $< > $@

# ---- Build userspace
$(USEROBJ): schedscore.c $(BPF_SKEL_H)
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(USERBIN): $(USEROBJ)
	$(CC) $(CFLAGS) $(USEROBJ) $(LDFLAGS) $(LDLIBS) -o $@

# Optional static binary (fully static; requires static libc and static libbpf)
USERBIN_STATIC := schedscore-static

$(USERBIN_STATIC): $(USEROBJ)
	$(CC) $(CFLAGS) $(USEROBJ) $(LDFLAGS) -static $(LDLIBS) -o $@

# Build a static binary via: make static

# ---- Static MUSL build (portable static binary)
MUSL_CC        ?= musl-gcc
MUSL_PKG_CONFIG?= pkg-config
MUSL_CFLAGS    ?= $(CFLAGS)
# Pick up libbpf cflags for musl toolchain as well
MUSL_LIBBPF_CFLAGS := $(shell $(MUSL_PKG_CONFIG) --cflags libbpf 2>/dev/null)
MUSL_CPPFLAGS  ?= $(CPPFLAGS) $(MUSL_LIBBPF_CFLAGS)
MUSL_LDFLAGS   ?= $(LDFLAGS)
# Use pkg-config --static to pick static dependencies for libbpf
MUSL_LDLIBS    ?= $(shell $(MUSL_PKG_CONFIG) --static --libs libbpf 2>/dev/null)

USEROBJ_MUSL   := schedscore.musl.o
USERBIN_MUSL   := schedscore-static-musl

.PHONY: static-musl check-musl

check-musl:
	@if ! command -v $(MUSL_CC) >/dev/null 2>&1; then \
		echo "ERROR: $(MUSL_CC) not found. Install musl-tools (musl-gcc)."; exit 1; \
	fi
	@if [ -z "$(MUSL_LDLIBS)" ]; then \
		echo "ERROR: pkg-config --static --libs libbpf returned empty. Install static libbpf (e.g., libbpf-static)."; exit 1; \
	fi

$(USEROBJ_MUSL): schedscore.c $(BPF_SKEL_H)
	$(MUSL_CC) $(MUSL_CFLAGS) $(MUSL_CPPFLAGS) -c $< -o $@

$(USERBIN_MUSL): $(USEROBJ_MUSL)
	$(MUSL_CC) $(MUSL_CFLAGS) $(USEROBJ_MUSL) $(MUSL_LDFLAGS) -static $(MUSL_LDLIBS) -o $@

static-musl: deps check-musl $(USERBIN_MUSL)

.PHONY: static
static: deps $(USERBIN_STATIC)

# ---- Clean
clean:
	$(RM) -f $(USERBIN) $(USEROBJ) $(BPF_O) $(BPF_SKEL_H) $(VMLINUX_H)

# ---- Tests
.PHONY: test
TEST_SCRIPT := ./test_schedscore.sh

test: all $(TEST_SCRIPT)
	@bash $(TEST_SCRIPT)

.PHONY: all clean deps
